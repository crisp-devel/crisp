if     (PRESET_ARCH_X86_64)
    add_compile_definitions(PRESET_ARCH_X86_64)
    add_compile_definitions(PRESET_ARCH_BIT=64)
    add_compile_definitions(PRESET_ARCH_ENDIAN_LITTLE)
    
    set(PRESET_ARCH_ENDIAN_LITTLE on)
    set(PRESET_ARCH_ENDIAN_BIG    off)

    set(PRESET_ARCH_X86_64 on)
    set(PRESET_ARCH_BIT 64)
elseif (PRESET_ARCH_X86)
    add_compile_definitions(PRESET_ARCH_X86)
    add_compile_definitions(PRESET_ARCH_BIT=32)
    add_compile_definitions(PRESET_ARCH_ENDIAN_LITTLE)
    
    set(PRESET_ARCH_ENDIAN_LITTLE on)
    set(PRESET_ARCH_ENDIAN_BIG    off)

    set(PRESET_ARCH_X86 on)
    set(PRESET_ARCH_BIT 32)
endif()

if     ("${CMAKE_C_COMPILER_ID}" MATCHES  "Clang")
    add_compile_definitions(PRESET_COMPILER_CLANG)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_CLANG on)
    set(PRESET_CALL_SYSV      on)
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    add_compile_definitions(PRESET_COMPILER_GCC)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_GCC on)
    set(PRESET_CALL_SYSV    on)
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
    add_compile_definitions(PRESET_COMPILER_INTEL)
    add_compile_definitions(PRESET_CALL_SYSV)

    set(PRESET_COMPILER_INTEL on)
    set(PRESET_CALL_SYSV      on)
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
    add_compile_definitions(PRESET_COMPILER_MSVC)
    add_compile_definitions(PRESET_CALL_VECTORCALL)

    set(PRESET_COMPILER_MSVC   on)
    set(PRESET_CALL_VECTORCALL on)
endif()

if    (WIN32)
    add_compile_definitions(PRESET_WIN32)
    set(PRESET_WIN32 on)
elseif(UNIX AND NOT APPLE)
    add_compile_definitions(PRESET_LINUX)
    set(PRESET_LINUX on)
endif ()

add_subdirectory(src)
if (PRESET_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif()